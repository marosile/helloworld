<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="boardMapper">

    <!-- Board ResultMap -->
    <resultMap type="Board" id="boardResultMap">

        <id property="boardNo" column="BOARD_NO"/>

        <result property="boardTitle" column="BOARD_TITLE"/>
        <result property="boardContent" column="BOARD_CONTENT"/>
        <result property="createDate" column="CREATE_DT"/>
        <result property="modifyDate" column="MODIFY_DT"/>
        <result property="deletedFl" column="DELETED_FL"/>
        <result property="memberId" column="MEMBER_ID"/>
        <result property="memberNickname" column="MEMBER_NICK"/>
        <result property="boardCode" column="BOARD_CODE"/>
        <result property="boardName" column="BOARD_NAME"/>
        <result property="likeCount" column="LIKE_COUNT"/>
        <result property="profileImage" column="PROFILE_IMG"/>
        <result property="readCount" column="READ_COUNT"/>
        <result property="tagName" column="TAG_NM"/>
        <result property="followFrom" column="FOLLOW_FROM"/>
        <result property="followTo" column="FOLLOW_TO"/>
        <result property="commentCount" column="COMMENT_COUNT"/>
        <result property="tagList" column="TAGS" javaType="java.util.List" jdbcType="VARCHAR"
                typeHandler="io.marosile.helloworld.board.controller.TagListTypeHandler"/>

        <!-- 게시글 상세조회 할 때 -> 댓글 조회 -->
        <collection property="commentList"
                    select="selectCommentList" column="BOARD_NO"
                    javaType="java.util.ArrayList" ofType="Comment">
        </collection>

    </resultMap>

    <!-- Comment ResultMap -->
    <resultMap type="Comment" id="commentResultMap">

        <id property="commentNo" column="COMMENT_NO"/>

        <result property="boardNo" column="BOARD_NO"/>
        <result property="memberId" column="MEMBER_ID"/>
        <result property="commentContent" column="COMMENT_CONTENT"/>
        <result property="createDate" column="CREATE_DT"/>
        <result property="modifyDate" column="MODIFY_DT"/>
        <result property="parentNo" column="PARENT_NO"/>
        <result property="commentDeleteFlag" column="DELETED_FL"/>
        <result property="memberNickname" column="MEMBER_NICK"/>
        <result property="profileImage" column="PROFILE_IMG"/>

    </resultMap>


    <!-- 게시글 목록 조회 10(최신순,기본값), 검색유무 확인 -->
    <select id="selectBoardList" resultMap="boardResultMap" parameterType="map">

        SELECT B.BOARD_NO, B.MEMBER_ID, B.BOARD_TITLE, B.BOARD_CONTENT, B.MODIFY_DT, B.DELETED_FL, B.READ_COUNT,
        BG.BOARD_CODE, M.MEMBER_NICK, M.PROFILE_IMG
        , <![CDATA[
		            CASE  
		               WHEN SYSDATE - B.CREATE_DT < 1/24/60
		               THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24 * 60 * 60 ) || '초 전'
		               WHEN SYSDATE - B.CREATE_DT < 1/24
		               THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24 * 60) || '분 전'
		               WHEN SYSDATE - B.CREATE_DT < 1
		               THEN FLOOR( (SYSDATE - B.CREATE_DT) * 24) || '시간 전'
		               ELSE TO_CHAR(B.CREATE_DT, 'YYYY-MM-DD')
		            END AS CREATE_DT
	           ]]>
        ,(SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT
        ,(SELECT LISTAGG(T.TAG_NM, ', ') WITHIN GROUP (ORDER BY T.TAG_NM)
        FROM TAG_RELATION TR
        JOIN TAG T ON TR.TAG_NO = T.TAG_NO
        WHERE TR.ITEM_NO = B.BOARD_NO) TAGS
        FROM BOARD B
        JOIN BOARD_GENERAL BG ON (B.BOARD_NO = BG.BOARD_NO)
        JOIN MEMBER M ON (B.MEMBER_ID = M.MEMBER_ID)
        WHERE BG.BOARD_CODE = #{boardCode} AND B.DELETED_FL = 'N'
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (B.BOARD_TITLE LIKE '%' || #{searchKeyword} || '%' OR B.BOARD_CONTENT LIKE '%' || #{searchKeyword} ||
            '%')
        </if>
        ORDER BY BOARD_NO DESC

    </select>


    <!-- 최신순, 조회순 ajax 10개, 검색 유무 확인 -->
    <select id="loadBoardList" resultMap="boardResultMap" parameterType="map">

        SELECT *
        FROM (
        SELECT B.BOARD_NO, B.MEMBER_ID, B.BOARD_TITLE, B.BOARD_CONTENT, B.CREATE_DT, B.MODIFY_DT, B.DELETED_FL,
        B.READ_COUNT, BG.BOARD_CODE, M.MEMBER_NICK, M.PROFILE_IMG
        ,(SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT
        ,(SELECT LISTAGG(T.TAG_NM, ', ') WITHIN GROUP (ORDER BY T.TAG_NM)
        FROM TAG_RELATION TR
        JOIN TAG T ON TR.TAG_NO = T.TAG_NO
        WHERE TR.ITEM_NO = B.BOARD_NO) TAGS
        FROM BOARD B
        JOIN BOARD_GENERAL BG ON (B.BOARD_NO = BG.BOARD_NO)
        JOIN MEMBER M ON (B.MEMBER_ID = M.MEMBER_ID)
        WHERE BG.BOARD_CODE = #{boardCode} AND B.DELETED_FL = 'N'
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (B.BOARD_TITLE LIKE '%' || #{searchKeyword} || '%' OR B.BOARD_CONTENT LIKE '%' || #{searchKeyword} ||
            '%')
        </if>

        <choose>
            <when test="sortType == 'readCount'">
                ORDER BY READ_COUNT DESC
            </when>
            <otherwise>
                ORDER BY BOARD_NO DESC
            </otherwise>
        </choose>

        ) WHERE ROWNUM BETWEEN 1 AND 10

    </select>

    <!-- 최신순 정렬 -->
    <select id="loadRecentPosts" resultMap="boardResultMap" parameterType="map">
        SELECT * FROM (
        SELECT A.*, ROWNUM AS rnum FROM (
        SELECT
        B.BOARD_NO, B.MEMBER_ID, B.BOARD_TITLE, B.BOARD_CONTENT, B.CREATE_DT, B.MODIFY_DT, B.DELETED_FL, B.READ_COUNT,
        BG.BOARD_CODE, M.MEMBER_NICK, M.PROFILE_IMG,
        (SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,
        ( SELECT LISTAGG(T.TAG_NM, ', ') WITHIN GROUP (ORDER BY T.TAG_NM)
        FROM TAG_RELATION TR
        JOIN TAG T ON TR.TAG_NO = T.TAG_NO
        WHERE TR.ITEM_NO = B.BOARD_NO
        ) TAGS
        FROM BOARD B
        JOIN MEMBER M ON B.MEMBER_ID = M.MEMBER_ID
        JOIN BOARD_GENERAL BG ON B.BOARD_NO = BG.BOARD_NO
        WHERE BG.BOARD_CODE = #{boardCode} AND B.DELETED_FL = 'N'
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (B.BOARD_TITLE LIKE '%' || #{searchKeyword} || '%' OR B.BOARD_CONTENT LIKE '%' || #{searchKeyword} ||
            '%')
        </if>
        ORDER BY BOARD_NO DESC
        ) A
        )
        WHERE rnum BETWEEN #{start} AND #{end}
    </select>


    <!-- 조회순 정렬 -->
    <select id="loadReadCountPosts" resultMap="boardResultMap" parameterType="map">
        SELECT * FROM (
        SELECT A.*, ROWNUM AS rnum FROM (
        SELECT
        B.BOARD_NO, B.MEMBER_ID, B.BOARD_TITLE, B.BOARD_CONTENT, B.CREATE_DT, B.MODIFY_DT, B.DELETED_FL, B.READ_COUNT,
        BG.BOARD_CODE, M.MEMBER_NICK, M.PROFILE_IMG,
        (SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,
        ( SELECT LISTAGG(T.TAG_NM, ', ') WITHIN GROUP (ORDER BY T.TAG_NM)
        FROM TAG_RELATION TR
        JOIN TAG T ON TR.TAG_NO = T.TAG_NO
        WHERE TR.ITEM_NO = B.BOARD_NO
        ) TAGS
        FROM BOARD B
        JOIN MEMBER M ON B.MEMBER_ID = M.MEMBER_ID
        JOIN BOARD_GENERAL BG ON B.BOARD_NO = BG.BOARD_NO
        WHERE BG.BOARD_CODE = #{boardCode} AND B.DELETED_FL = 'N'
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (B.BOARD_TITLE LIKE '%' || #{searchKeyword} || '%' OR B.BOARD_CONTENT LIKE '%' || #{searchKeyword} ||
            '%')
        </if>
        ORDER BY READ_COUNT DESC
        ) A
        )
        WHERE rnum BETWEEN #{start} AND #{end}
    </select>


    <!-- 게시글 상세 조회 -->
    <select id="selectBoard" resultMap="boardResultMap">
        SELECT B.BOARD_NO,
               B.MEMBER_ID,
               B.BOARD_TITLE,
               B.BOARD_CONTENT,
               B.CREATE_DT,
               B.MODIFY_DT,
               B.DELETED_FL,
               B.READ_COUNT,
               M.MEMBER_NICK,
               M.PROFILE_IMG,
               BG.BOARD_CODE,
               (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT
        FROM BOARD B
                 JOIN MEMBER M ON (B.MEMBER_ID = M.MEMBER_ID)
                 JOIN BOARD_GENERAL BG ON (B.BOARD_NO = BG.BOARD_NO)
        WHERE B.BOARD_NO = #{boardNo}
          AND BG.BOARD_CODE = #{boardCode}
    </select>

    <!-- 댓글 조회 -->
    <select id="selectCommentList" resultMap="commentResultMap">
        SELECT LEVEL, C.*
        FROM (SELECT COMMENT_NO,
                     COMMENT_CONTENT,
                     TO_CHAR(CREATE_DT, 'YYYY"년"MM"월"DD"일"HH"시"MM"분"SS"초"') CREATE_DT,
                     BOARD_NO,
                     COM.MEMBER_ID,
                     MEM.MEMBER_NICK,
                     MEM.PROFILE_IMG,
                     COM.PARENT_NO,
                     COM.DELETED_FL
              FROM "COMMENT" COM
                       JOIN MEMBER MEM ON (COM.MEMBER_ID = MEM.MEMBER_ID)
              WHERE BOARD_NO = #{boardCode}) C
        WHERE DELETED_FL = 'N'
            START
        WITH PARENT_NO IS NULL
        CONNECT BY PRIOR COMMENT_NO = PARENT_NO
        ORDER SIBLINGS BY COMMENT_NO
    </select>

    <!-- 게시글 작성  -->
    <insert id="boardInsert" parameterType="Board" useGeneratedKeys="true">

        <selectKey order="BEFORE" resultType="_int"
                   keyProperty="boardNo">
            SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
        </selectKey>

        INSERT ALL

        INTO BOARD (BOARD_NO, MEMBER_ID, BOARD_TITLE, BOARD_CONTENT, CREATE_DT, DELETED_FL, READ_COUNT)
        VALUES(#{boardNo}, #{memberId}, #{boardTitle}, #{boardContent}, DEFAULT, DEFAULT, 0)

        INTO BOARD_GENERAL (BOARD_NO, BOARD_CODE) VALUES(#{boardNo}, #{boardCode})

        SELECT 1 FROM DUAL

    </insert>

    <!-- 게시글 수정 -->
    <update id="boardUpdate">
        UPDATE BOARD
        SET BOARD_TITLE   = #{boardTitle},
            BOARD_CONTENT = #{boardContent}
        WHERE BOARD_NO = #{boardNo}
    </update>

    <update id="boardDelete">
        UPDATE BOARD
        SET DELETED_FL = 'Y'
        WHERE BOARD_NO = ${boardNo}
    </update>

    <!-- 북마크 확인 여부 -->
    <select id="bookMarkCheck" resultType="_int">
        SELECT COUNT(*)
        FROM BOOKMARK
        WHERE BOARD_NO = ${boardNo}
          AND MEMBER_ID = #{memberId}
    </select>

    <!-- 북마크 테이블 삽입 -->
    <insert id="insertBookMark">
        INSERT INTO BOOKMARK
        VALUES (#{boardNo}, #{memberId})
    </insert>

    <!-- 북마크 테이블 삭제 -->
    <delete id="deleteBookMark">
        DELETE
        FROM BOOKMARK
        WHERE BOARD_NO = #{boardNo}
          AND MEMBER_ID = #{memberId}
    </delete>

    <!-- 팔로우 확인 여부 -->
    <select id="followCheck" resultType="_int">
        SELECT COUNT(*)
        FROM FOLLOW
        WHERE FOLLOW_FROM = #{userId}
          AND FOLLOW_TO = #{memberId}
    </select>

    <!-- 팔로우 테이블 삽입 -->
    <insert id="insertFollow">
        INSERT INTO FOLLOW
        VALUES (#{userId}, #{memberId})
    </insert>

    <!-- 팔로우 테이블 삭제 -->
    <delete id="deleteFollow">
        DELETE
        FROM FOLLOW
        WHERE FOLLOW_FROM = #{userId}
          AND FOLLOW_TO = #{memberId}
    </delete>

    <!-- 좋아요 확인 여부 -->
    <select id="likeCheck" resultType="_int">
        SELECT COUNT(*)
        FROM "LIKE"
        WHERE BOARD_NO = #{boardNo}
          AND MEMBER_ID = #{memberId}
    </select>


    <!-- 좋아요 테이블 삽입 -->
    <insert id="insertBoardLike">
        INSERT INTO "LIKE"
        VALUES (#{boardNo}, #{memberId})
    </insert>

    <!-- 좋아요 테이블 삭제 -->
    <delete id="deleteBoardLike">
        DELETE
        FROM "LIKE"
        WHERE BOARD_NO = #{boardNo}
          AND MEMBER_ID = #{memberId}
    </delete>

    <!-- 좋아요 개수 조회 -->
    <select id="countBoardLike" resultType="_int">
        SELECT COUNT(*)
        FROM "LIKE"
        WHERE BOARD_NO = #{boardNo}
    </select>

    <!-- 조회 수 증가 -->
    <update id="updateReadCount">
        UPDATE BOARD
        SET READ_COUNT = READ_COUNT + 1
        WHERE BOARD_NO = #{boardNo}
    </update>

    <!-- 신고글 작성 -->
    <insert id="insertReport">
        INSERT INTO REPORT
        VALUES (SEQ_REPORT_NO.NEXTVAL, #{boardNo}, #{memberId}, #{content})
    </insert>

    <!-- 전체 게시글 조회수 top10 -->
    <select id="getTopList" resultMap="boardResultMap">

        SELECT ROWNUM, BOARD_NO, BOARD_CODE, BOARD_TITLE, READ_COUNT, COMMENT_COUNT
        FROM (SELECT ROWNUM,
                     B.BOARD_NO,
                     BG.BOARD_CODE,
                     B.BOARD_TITLE,
                     B.READ_COUNT,
                     (SELECT COUNT(*) FROM "COMMENT" C WHERE C.BOARD_NO = B.BOARD_NO) AS COMMENT_COUNT
              FROM BOARD B
                       JOIN BOARD_GENERAL BG ON (B.BOARD_NO = BG.BOARD_NO) 
                       WHERE B.DELETED_FL = 'N'
              ORDER BY READ_COUNT DESC)
        WHERE ROWNUM &lt; 11

    </select>


    <!-- 트렌드 목록 조회(태그별) -->
    <select id="selectTagList" resultMap="boardResultMap">
        SELECT B.BOARD_NO,
               B.BOARD_TITLE,
               B.BOARD_CONTENT,
               BG.BOARD_CODE,
               COUNT(L.BOARD_NO) AS LIKE_COUNT,
               B.READ_COUNT,
               M.MEMBER_ID,
               M.MEMBER_NICK,
               M.PROFILE_IMG
        FROM BOARD B
                 JOIN BOARD_GENERAL BG ON B.BOARD_NO = BG.BOARD_NO
                 LEFT JOIN "LIKE" L ON B.BOARD_NO = L.BOARD_NO
                 JOIN TAG_RELATION TR ON B.BOARD_NO = TR.ITEM_NO
                 JOIN TAG T ON TR.TAG_NO = T.TAG_NO
                 JOIN MEMBER M ON M.MEMBER_ID = B.MEMBER_ID
        WHERE T.TAG_NM = #{type}
          AND BG.BOARD_CODE IN (1, 2, 3)
          AND B.DELETED_FL = 'N'
        GROUP BY B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CONTENT, BG.BOARD_CODE,
                 B.READ_COUNT, M.MEMBER_ID, M.MEMBER_NICK, M.PROFILE_IMG
        ORDER BY LIKE_COUNT DESC
            FETCH FIRST 10 ROWS ONLY
    </select>


    <!-- 트렌드 목록 조회(메인화면) -->
    <select id="selectTrandList" resultMap="boardResultMap">
        SELECT B.BOARD_NO,
               B.BOARD_TITLE,
               B.BOARD_CONTENT,
               COUNT(L.BOARD_NO) AS LIKE_COUNT,
               B.READ_COUNT,
               M.MEMBER_ID,
               M.MEMBER_NICK,
               M.PROFILE_IMG
        FROM BOARD B
                 LEFT JOIN "LIKE" L ON B.BOARD_NO = L.BOARD_NO
                 JOIN MEMBER M ON M.MEMBER_ID = B.MEMBER_ID
        WHERE B.BOARD_NO IN (SELECT BOARD_NO FROM BOARD_GENERAL WHERE BOARD_CODE IN (1, 2, 3)) AND B.DELETED_FL = 'N'
        GROUP BY B.BOARD_NO, B.BOARD_TITLE, B.BOARD_CONTENT, B.READ_COUNT,
                 M.MEMBER_ID,
                 M.MEMBER_NICK,
                 M.PROFILE_IMG
        ORDER BY LIKE_COUNT DESC
            FETCH FIRST 10 ROWS ONLY
    </select>


    <!-- 트렌드 상세페이지 -->
    <select id="selectTrandDetail" resultMap="boardResultMap">
        SELECT B.BOARD_NO,
               B.MEMBER_ID,
               B.BOARD_TITLE,
               B.BOARD_CONTENT,
               B.CREATE_DT,
               B.DELETED_FL,
               B.READ_COUNT,
               M.MEMBER_NICK,
               M.PROFILE_IMG,
               (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT
        FROM BOARD B
                 JOIN MEMBER M ON (B.MEMBER_ID = M.MEMBER_ID)
                 JOIN BOARD_GENERAL BG ON (B.BOARD_NO = BG.BOARD_NO)
        WHERE B.BOARD_NO = #{boardNo}
    </select>

    <!-- 트렌드 댓글 조회 -->
    <select id="selectComment" resultMap="commentResultMap">
        SELECT LEVEL, C.*
        FROM (SELECT COMMENT_NO,
                     COMMENT_CONTENT,
                     TO_CHAR(CREATE_DT, 'YYYY-MM-DD') CREATE_DT,
                     BOARD_NO,
                     COM.MEMBER_ID,
                     MEM.MEMBER_NICK,
                     MEM.PROFILE_IMG,
                     COM.PARENT_NO,
                     COM.DELETED_FL
              FROM "COMMENT" COM
                       JOIN MEMBER MEM ON (COM.MEMBER_ID = MEM.MEMBER_ID)
              WHERE BOARD_NO = #{boardNo}) C
        WHERE DELETED_FL = 'N'
            START
        WITH PARENT_NO IS NULL
        CONNECT BY PRIOR COMMENT_NO = PARENT_NO
        ORDER SIBLINGS BY COMMENT_NO
    </select>

    <select id="selectFollowingBoardList" resultMap="boardResultMap">

		SELECT
			B.BOARD_NO,
			B.MEMBER_ID,
			B.BOARD_TITLE,
			B.BOARD_CONTENT,
			B.MODIFY_DT,
			B.DELETED_FL,
			B.READ_COUNT,
			G.*,
			M.*,
			CASE WHEN SYSDATE - B.CREATE_DT &lt; 1 / 24 / 60 THEN FLOOR(
			(SYSDATE - B.CREATE_DT) * 24 * 60 * 60
			) || '초 전' WHEN SYSDATE - B.CREATE_DT &lt; 1 / 24 THEN FLOOR(
			(SYSDATE - B.CREATE_DT) * 24 * 60
			) || '분 전' WHEN SYSDATE - B.CREATE_DT &lt; 1 THEN FLOOR(
			(SYSDATE - B.CREATE_DT) * 24
			) || '시간 전' ELSE TO_CHAR(B.CREATE_DT, 'YYYY-MM-DD') END AS CREATE_DT,
            (SELECT LISTAGG(T.TAG_NM, ', ') WITHIN GROUP (ORDER BY T.TAG_NM)
            FROM TAG_RELATION TR
            JOIN TAG T ON TR.TAG_NO = T.TAG_NO
            WHERE TR.ITEM_NO = B.BOARD_NO) TAGS
		  FROM BOARD B
		  JOIN BOARD_GENERAL G ON(B.BOARD_NO = G.BOARD_NO)
		  JOIN MEMBER M ON(B.MEMBER_ID = M.MEMBER_ID)
		 WHERE B.MEMBER_ID IN (SELECT FOLLOW_TO
								FROM FOLLOW
							   WHERE FOLLOW_FROM = #{memberId})
		   AND B.DELETED_FL = 'N'
		 ORDER BY B.CREATE_DT DESC
    </select>

    <select id="selectRecentBoardList" resultMap="boardResultMap">
        SELECT
            B.BOARD_NO,
            B.MEMBER_ID,
            B.BOARD_TITLE,
            B.BOARD_CONTENT,
            B.MODIFY_DT,
            B.DELETED_FL,
            B.READ_COUNT,
            G.*,
            M.*,
            CASE WHEN SYSDATE - B.CREATE_DT &lt; 1 / 24 / 60 THEN FLOOR(
            (SYSDATE - B.CREATE_DT) * 24 * 60 * 60
            ) || '초 전' WHEN SYSDATE - B.CREATE_DT &lt; 1 / 24 THEN FLOOR(
            (SYSDATE - B.CREATE_DT) * 24 * 60
            ) || '분 전' WHEN SYSDATE - B.CREATE_DT &lt; 1 THEN FLOOR(
            (SYSDATE - B.CREATE_DT) * 24
            ) || '시간 전' ELSE TO_CHAR(B.CREATE_DT, 'YYYY-MM-DD') END AS CREATE_DT,
            (SELECT LISTAGG(T.TAG_NM, ', ') WITHIN GROUP (ORDER BY T.TAG_NM)
            FROM TAG_RELATION TR
            JOIN TAG T ON TR.TAG_NO = T.TAG_NO
            WHERE TR.ITEM_NO = B.BOARD_NO) TAGS
          FROM BOARD B
          JOIN BOARD_GENERAL G ON(B.BOARD_NO = G.BOARD_NO)
          JOIN MEMBER M ON(B.MEMBER_ID = M.MEMBER_ID)
         WHERE B.DELETED_FL = 'N'
         ORDER BY B.CREATE_DT DESC
    </select>

    <select id="selectPopularBoardList" resultMap="boardResultMap">
        SELECT
            B.BOARD_NO,
            B.MEMBER_ID,
            B.BOARD_TITLE,
            B.BOARD_CONTENT,
            B.MODIFY_DT,
            B.DELETED_FL,
            B.READ_COUNT,
            G.*,
            M.*,
            CASE WHEN SYSDATE - B.CREATE_DT &lt; 1 / 24 / 60 THEN FLOOR(
            (SYSDATE - B.CREATE_DT) * 24 * 60 * 60
            ) || '초 전' WHEN SYSDATE - B.CREATE_DT &lt; 1 / 24 THEN FLOOR(
            (SYSDATE - B.CREATE_DT) * 24 * 60
            ) || '분 전' WHEN SYSDATE - B.CREATE_DT &lt; 1 THEN FLOOR(
            (SYSDATE - B.CREATE_DT) * 24
            ) || '시간 전' ELSE TO_CHAR(B.CREATE_DT, 'YYYY-MM-DD') END AS CREATE_DT,
            (SELECT LISTAGG(T.TAG_NM, ', ') WITHIN GROUP (ORDER BY T.TAG_NM)
            FROM TAG_RELATION TR
            JOIN TAG T ON TR.TAG_NO = T.TAG_NO
            WHERE TR.ITEM_NO = B.BOARD_NO) TAGS
          FROM BOARD B
          JOIN BOARD_GENERAL G ON(B.BOARD_NO = G.BOARD_NO)
          JOIN MEMBER M ON(B.MEMBER_ID = M.MEMBER_ID)
         WHERE ROWNUM &lt;= 5
           AND B.DELETED_FL = 'N'
         ORDER BY B.READ_COUNT DESC
    </select>
    
       
   <!-- 팔로워 조회 -->
   <select id="selectFollowerList" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		JOIN FOLLOW ON(MEMBER_ID = FOLLOW_FROM)
		WHERE FOLLOW_TO = #{boardUserId}
   </select>
   
   
   
   <!-- 팔로잉 조회 -->
   <select id="selectFollowingList" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
		JOIN FOLLOW ON(MEMBER_ID = FOLLOW_TO)
		WHERE FOLLOW_FROM = #{boardUserId}
   </select>
   
    
    
    
</mapper>
