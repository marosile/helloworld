<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="studyMapper">

    <!-- 임시 -->
    <resultMap type="Study" id="StudyResultMap">

        <id property="studyNo" column="STUDY_NO"/>

        <result property="followFrom" column="FOLLOW_FROM"/>
        <result property="followTo" column="FOLLOW_TO"/>
        <result property="boardNo" column="BOARD_NO"/>
        <result property="boardTitle" column="BOARD_TITLE"/>
        <result property="boardContent" column="BOARD_CONTENT"/>
        <result property="createDate" column="CREATE_DT"/>
        <result property="modifyDate" column="MODIFY_DT"/>
        <result property="deletedFl" column="DELETED_FL"/>
        <result property="readCount" column="READ_COUNT"/>

        <result property="memberId" column="MEMBER_ID"/>
        <result property="memberNickname" column="MEMBER_NICK"/>
        <result property="memberProfileImg" column="PROFILE_IMG"/>
        <result property="memberTel" column="MEMBER_TEL"/>

        <result property="location" column="LOCATION"/>
        <result property="headCount" column="HEAD_COUNT"/>
        <result property="studyStatus" column="STUDY_STATUS"/>
        <result property="likeCount" column="LIKE_COUNT"/>

        <result property="itemNo" column="ITEM_NO"/>
        <result property="tagNm" column="TAG_NM"/>
        <result property="tagNo" column="TAG_NO"/>

        <!--스터디 댓글 목록 조회-->
        <collection property="studyCommentList"
                    select="selectStudyCommentList" column="BOARD_NO"
                    javaType="java.util.ArrayList" ofType="studyComment">
        </collection>

    </resultMap>

    <!-- Comment resultMap -->
    <resultMap id="studyCommentResultMap" type="studyComment">

        <id property="commentNo" column="COMMENT_NO"/>

        <result property="boardNo" column="BOARD_NO"/>
        <result property="memberId" column="MEMBER_ID"/>
        <result property="commentContent" column="COMMENT_CONTENT"/>
        <result property="createDate" column="CREATE_DT"/>
        <result property="modifyDate" column="MODIFY_DT"/>
        <result property="parentNo" column="PARENT_NO"/>
        <result property="commentDeleteFlag" column="DELETED_FL"/>
        <result property="memberNickname" column="MEMBER_NICK"/>
        <result property="profileImage" column="PROFILE_IMG"/>

    </resultMap>

    <!--댓글 목록 조회-->
    <select id="selectStudyCommentList" resultMap="studyCommentResultMap">
        SELECT LEVEL, C.*
        FROM (SELECT COMMENT_NO,
                     COMMENT_CONTENT,
                     TO_CHAR(CREATE_DT, 'YYYY"년"MM"월"DD"일 "HH"시"MM"분"SS"초"') CREATE_DT,
                     BOARD_NO,
                     COM.MEMBER_ID,
                     MEM.MEMBER_NICK,
                     MEM.PROFILE_IMG,
                     COM.PARENT_NO,
                     COM.DELETED_FL
              FROM "COMMENT" COM
                       JOIN MEMBER MEM ON (COM.MEMBER_ID = MEM.MEMBER_ID)
              WHERE BOARD_NO = #{boardNo}) C
        WHERE DELETED_FL = 'N'
            START
        WITH PARENT_NO IS NULL
        CONNECT BY PRIOR COMMENT_NO =PARENT_NO
        ORDER SIBLINGS BY COMMENT_NO
    </select>


    <!--스터디 목록 조회-->
    <select id="selectStudyList" resultMap="StudyResultMap">
        SELECT B.READ_COUNT
             , S.STUDY_NO
             , B.BOARD_NO
             , B.BOARD_TITLE
             , B.BOARD_CONTENT
             , S.LOCATION
             , S.STUDY_STATUS
             , (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT
        FROM BOARD B
                 JOIN BOARD_STUDY S ON (B.BOARD_NO = S.BOARD_NO)
        WHERE B.DELETED_FL = 'N'
          AND S.STUDY_STATUS = 'N'
        ORDER BY S.BOARD_NO DESC
    </select>

    <!--스터디 상세 조회 -->
    <select id="studyDetail" resultMap="StudyResultMap">
        SELECT S.STUDY_STATUS
             , B.BOARD_NO
             , M.MEMBER_TEL
             , M.PROFILE_IMG
             , M.MEMBER_NICK
             , S.HEAD_COUNT
             , B.MEMBER_ID
             , B.BOARD_TITLE
             , B.BOARD_CONTENT
             , B.CREATE_DT
             , B.MODIFY_DT
             , B.DELETED_FL
             , B.READ_COUNT
             , S.LOCATION
             , S.STUDY_NO
             , T.TAG_NM
             , TR.TAG_NO
             , B.MODIFY_DT
             , TO_CHAR(B.CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분"') AS  CREATE_DT
             , (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = S.BOARD_NO) LIKE_COUNT

        FROM BOARD B
                 JOIN "MEMBER" M ON (B.MEMBER_ID = M.MEMBER_ID)
                 JOIN BOARD_STUDY S ON (B.BOARD_NO = S.BOARD_NO)
                 JOIN TAG_RELATION TR ON (B.BOARD_NO = TR.ITEM_NO)
                 JOIN TAG T ON (TR.TAG_NO = T.TAG_NO)

        WHERE B.BOARD_NO = #{boardNo}
          AND TR.ITEM_TYPE = 1
          AND B.DELETED_FL='N'

        ORDER BY S.BOARD_NO DESC
    </select>


    <select id="studyChattingDetail" resultMap="StudyResultMap">
        SELECT S.STUDY_STATUS
             , B.BOARD_NO
             , M.MEMBER_NICK
             , M.PROFILE_IMG
             , S.HEAD_COUNT
             , B.MEMBER_ID
             , B.BOARD_TITLE
             , B.BOARD_CONTENT
             , B.CREATE_DT
             , B.MODIFY_DT
             , B.DELETED_FL
             , B.READ_COUNT
             , S.LOCATION
             , S.STUDY_NO
             , T.TAG_NM
             , M.PROFILE_IMG
             , F.FOLLOW_FROM
             , F.FOLLOW_TO
             , TR.TAG_NO
             , B.MODIFY_DT
             , TO_CHAR(B.CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분"') AS  CREATE_DT
             , (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = S.BOARD_NO) LIKE_COUNT

        FROM BOARD B
                 JOIN "MEMBER" M ON (B.MEMBER_ID = M.MEMBER_ID)
                 JOIN BOARD_STUDY S ON (B.BOARD_NO = S.BOARD_NO)
                 JOIN TAG_RELATION TR ON (B.BOARD_NO = TR.ITEM_NO)
                 JOIN TAG T ON (TR.TAG_NO = T.TAG_NO)
                 JOIN FOLLOW F ON (M.MEMBER_ID = F.FOLLOW_FROM)

        WHERE B.BOARD_NO = #{boardNo}
          AND FOLLOW_TO = #{memberId}
          AND TR.ITEM_TYPE = 1


        ORDER BY S.BOARD_NO DESC
    </select>

    <!--스터디 삽입-->
    <insert id="studyInsert" parameterType="Study">
        <selectKey order="BEFORE" resultType="Study" keyProperty="studyNo,boardNo">
            SELECT SEQ_STUDY_NO.NEXTVAL AS "studyNo", SEQ_BOARD_NO.NEXTVAL AS "boardNo" FROM DUAL
        </selectKey>
        INSERT ALL
        INTO STUDY VALUES(${studyNo}, #{boardTitle}, #{memberId}, DEFAULT)
        INTO BOARD VALUES(${boardNo}, #{memberId}, #{boardTitle}, #{boardContent}, DEFAULT, NULL, DEFAULT, DEFAULT)
        INTO BOARD_STUDY VALUES(${boardNo}, ${studyNo}, #{location}, ${headCount}, 'N')
        INTO TAG_RELATION VALUES((SELECT TAG_NO FROM TAG WHERE TAG_NM = #{tagNm} AND ROWNUM = 1), 0, ${boardNo})
        INTO TAG_RELATION VALUES((SELECT TAG_NO FROM TAG WHERE TAG_NM = #{tagNm} AND ROWNUM = 1), 1, ${boardNo})
        SELECT * FROM DUAL
    </insert>

    <!--스터디 수정-->
    <update id="studyUpdate1" parameterType="Study">
        UPDATE STUDY
        SET STUDY_TITLE='${boardTitle}'
        WHERE STUDY_NO = ${studyNo}
    </update>

    <update id="studyUpdate2" parameterType="Study">
        UPDATE BOARD
        SET BOARD_TITLE='${boardTitle}',
            BOARD_CONTENT='${boardContent}'
        WHERE BOARD_NO = ${boardNo}
    </update>

    <update id="studyUpdate3" parameterType="Study">
        UPDATE BOARD_STUDY
        SET LOCATION='${location}',
            HEAD_COUNT='${headCount}'
        WHERE BOARD_NO = ${boardNo}
    </update>

    <update id="studyUpdate4" parameterType="Study">
        UPDATE TAG_RELATION
        SET TAG_NO = (SELECT TAG_NO FROM TAG WHERE TAG_NM = #{tagNm} AND ROWNUM = 1)
        WHERE ITEM_NO = ${boardNo}
          AND ITEM_TYPE = 0
    </update>


    <update id="studyUpdate5" parameterType="Study">
        UPDATE TAG_RELATION
        SET TAG_NO = (SELECT TAG_NO FROM TAG WHERE TAG_NM = #{tagNm} AND ROWNUM = 1)
        WHERE ITEM_NO = ${boardNo}
          AND ITEM_TYPE = 1
    </update>

    <!-- 좋아요 확인 여부-->
    <select id="likeCheck" resultType="_int">
        SELECT COUNT(*)
        FROM "LIKE" L
                 JOIN BOARD_STUDY S ON (L.BOARD_NO = S.BOARD_NO)
        WHERE S.BOARD_NO = #{boardNo}
          AND MEMBER_ID = #{memberId}
    </select>

    <!-- 좋아요 삽입-->
    <insert id="insertStudyLike">
        INSERT INTO "LIKE"
        VALUES (#{boardNo}, #{memberId})
    </insert>

    <!--좋아요 삭제-->
    <delete id="deleteStudyLike">
        DELETE
        FROM "LIKE"
        WHERE BOARD_NO = #{boardNo}
          AND MEMBER_ID = #{memberId}
    </delete>

    <!--좋아요 개수 조회-->
    <select id="countStudyLike" resultType="_int">
        SELECT COUNT(*)
        FROM "LIKE"
        WHERE BOARD_NO = #{boardNo}
    </select>

    <!--조회수 조회-->
    <update id="updateReadCount">
        UPDATE BOARD
        SET READ_COUNT = READ_COUNT + 1
        WHERE BOARD_NO = #{boardNo}
    </update>

    <!--게시글 삭제-->
    <update id="studyDelete">
        UPDATE BOARD
        SET DELETED_FL = 'Y'
        WHERE BOARD_NO = #{boardNo}
    </update>

    <!--모집완료-->
    <update id="complete">
        UPDATE BOARD_STUDY
        SET STUDY_STATUS = 'Y'
        WHERE BOARD_NO = #{boardNo}
    </update>

    <!--top10위-->
    <select id="studyTopList" resultMap="StudyResultMap">
        SELECT ROWNUM,
               B.READ_COUNT,
               B.BOARD_NO,
               B.BOARD_TITLE,
               B.BOARD_CONTENT,
               S.STUDY_STATUS,
               (SELECT COUNT(*)
                FROM "LIKE" L
                WHERE L.BOARD_NO = B.BOARD_NO) AS LIKE_COUNT
        FROM BOARD B
                 JOIN BOARD_STUDY S ON (B.BOARD_NO = S.BOARD_NO)
        WHERE ROWNUM &lt; 11
          AND S.STUDY_STATUS = 'N'
          AND B.DELETED_FL = 'N'
        ORDER BY LIKE_COUNT DESC, S.BOARD_NO DESC
    </select>
    <!--
        &lt;!&ndash;위치 전체 검색&ndash;&gt;
        <select id="selectSearchAllLocation" resultMap="StudyResultMap">
            SELECT ROWNUM,S.STUDY_STATUS
            , B.BOARD_NO
            , M.MEMBER_NICK
            , S.HEAD_COUNT
            , B.MEMBER_ID
            , B.BOARD_TITLE
            , B.BOARD_CONTENT
            , B.CREATE_DT
            , B.MODIFY_DT
            , B.DELETED_FL
            , B.READ_COUNT
            , S.LOCATION
            , S.STUDY_NO
            , T.TAG_NM
            , TR.TAG_NO
            , B.MODIFY_DT
            , TO_CHAR(B.CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분"') AS  CREATE_DT
            , (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = S.BOARD_NO) LIKE_COUNT

            FROM BOARD B
            JOIN "MEMBER" M ON (B.MEMBER_ID = M.MEMBER_ID)
            JOIN BOARD_STUDY S ON (B.BOARD_NO = S.BOARD_NO)
            JOIN TAG_RELATION TR ON (B.BOARD_NO = TR.ITEM_NO)
            JOIN TAG T ON (TR.TAG_NO = T.TAG_NO)

            WHERE TR.ITEM_TYPE = 1
            ORDER BY ROWNUM DESC
        </select>

        &lt;!&ndash;위치만 검색&ndash;&gt;
        <select id="selectSearchLocation" resultMap="StudyResultMap">
            SELECT ROWNUM,S.STUDY_STATUS
                 , B.BOARD_NO
                 , M.MEMBER_NICK
                 , S.HEAD_COUNT
                 , B.MEMBER_ID
                 , B.BOARD_TITLE
                 , B.BOARD_CONTENT
                 , B.CREATE_DT
                 , B.MODIFY_DT
                 , B.DELETED_FL
                 , B.READ_COUNT
                 , S.LOCATION
                 , S.STUDY_NO
                 , T.TAG_NM
                 , TR.TAG_NO
                 , B.MODIFY_DT
                 , TO_CHAR(B.CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분"') AS  CREATE_DT
                 , (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = S.BOARD_NO) LIKE_COUNT

            FROM BOARD B
                     JOIN "MEMBER" M ON (B.MEMBER_ID = M.MEMBER_ID)
                     JOIN BOARD_STUDY S ON (B.BOARD_NO = S.BOARD_NO)
                     JOIN TAG_RELATION TR ON (B.BOARD_NO = TR.ITEM_NO)
                     JOIN TAG T ON (TR.TAG_NO = T.TAG_NO)

            WHERE TR.ITEM_TYPE = 1
            AND S.HEAD_COUNT =1

            <choose>
                <when test="location">
                    AND S.LOCATION LIKE '%{query}%'
                </when>
            </choose>

            ORDER BY ROWNUM DESC
        </select>

        &lt;!&ndash;포지션 검색&ndash;&gt;


        &lt;!&ndash;인원만 검색&ndash;&gt;
        <select id="selectSearchPerson" resultMap="StudyResultMap">
            SELECT ROWNUM,S.STUDY_STATUS
            , B.BOARD_NO
            , M.MEMBER_NICK
            , S.HEAD_COUNT
            , B.MEMBER_ID
            , B.BOARD_TITLE
            , B.BOARD_CONTENT
            , B.CREATE_DT
            , B.MODIFY_DT
            , B.DELETED_FL
            , B.READ_COUNT
            , S.LOCATION
            , S.STUDY_NO
            , T.TAG_NM
            , TR.TAG_NO
            , B.MODIFY_DT
            , TO_CHAR(B.CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분"') AS  CREATE_DT
            , (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = S.BOARD_NO) LIKE_COUNT

            FROM BOARD B
            JOIN "MEMBER" M ON (B.MEMBER_ID = M.MEMBER_ID)
            JOIN BOARD_STUDY S ON (B.BOARD_NO = S.BOARD_NO)
            JOIN TAG_RELATION TR ON (B.BOARD_NO = TR.ITEM_NO)
            JOIN TAG T ON (TR.TAG_NO = T.TAG_NO)

            WHERE TR.ITEM_TYPE = 1
            AND S.HEAD_COUNT =1

            <choose>
                <when test="headCount">
                    AND S.HEAD_COUNT LIKE '%{query}%'
                </when>
            </choose>

            ORDER BY ROWNUM DESC
        </select>


        &lt;!&ndash;위치, 포지션, 인원 모두 검색&ndash;&gt;
        <select id="selectSearchlistAll" resultMap="StudyResultMap">
            SELECT ROWNUM,S.STUDY_STATUS
            , B.BOARD_NO
            , M.MEMBER_NICK
            , S.HEAD_COUNT
            , B.MEMBER_ID
            , B.BOARD_TITLE
            , B.BOARD_CONTENT
            , B.CREATE_DT
            , B.MODIFY_DT
            , B.DELETED_FL
            , B.READ_COUNT
            , S.LOCATION
            , S.STUDY_NO
            , T.TAG_NM
            , TR.TAG_NO
            , B.MODIFY_DT
            , TO_CHAR(B.CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분"') AS  CREATE_DT
            , (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = S.BOARD_NO) LIKE_COUNT

            FROM BOARD B
            JOIN "MEMBER" M ON (B.MEMBER_ID = M.MEMBER_ID)
            JOIN BOARD_STUDY S ON (B.BOARD_NO = S.BOARD_NO)
            JOIN TAG_RELATION TR ON (B.BOARD_NO = TR.ITEM_NO)
            JOIN TAG T ON (TR.TAG_NO = T.TAG_NO)

            WHERE TR.ITEM_TYPE = 1
            AND S.HEAD_COUNT =1

            <choose>
                <when test="location">
                    AND S.LOCATION LIKE '%{query}%'
                </when>

                <when test="tagNm">
                    AND T.TAG_NM LIKE '%{query}%'
                </when>

                <when test="headCount">
                    AND S.HEAD_COUNT LIKE '%{query}%'
                </when>
            </choose>

            ORDER BY ROWNUM DESC
        </select>

        &lt;!&ndash;서울 전체, 포지션, 인원 검색&ndash;&gt;
        <select id="listAllSeoul" resultMap="StudyResultMap">
            SELECT ROWNUM,S.STUDY_STATUS
                 , B.BOARD_NO
                 , M.MEMBER_NICK
                 , S.HEAD_COUNT
                 , B.MEMBER_ID
                 , B.BOARD_TITLE
                 , B.BOARD_CONTENT
                 , B.CREATE_DT
                 , B.MODIFY_DT
                 , B.DELETED_FL
                 , B.READ_COUNT
                 , S.LOCATION
                 , S.STUDY_NO
                 , T.TAG_NM
                 , TR.TAG_NO
                 , B.MODIFY_DT
                 , TO_CHAR(B.CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분"') AS  CREATE_DT
                 , (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = S.BOARD_NO) LIKE_COUNT

            FROM BOARD B
                     JOIN "MEMBER" M ON (B.MEMBER_ID = M.MEMBER_ID)
                     JOIN BOARD_STUDY S ON (B.BOARD_NO = S.BOARD_NO)
                     JOIN TAG_RELATION TR ON (B.BOARD_NO = TR.ITEM_NO)
                     JOIN TAG T ON (TR.TAG_NO = T.TAG_NO)

            WHERE TR.ITEM_TYPE = 1

            <choose>
                <when test="tagNm">
                    AND T.TAG_NM LIKE '%{query}%'
                </when>

                <when test="headCount">
                    AND S.HEAD_COUNT LIKE '%{query}%'
                </when>
            </choose>
            ORDER BY ROWNUM DESC
        </select>-->

    <!--검색 조건-->
    <select id="selectSearch" resultMap="StudyResultMap">
        SELECT ROWNUM,S.STUDY_STATUS
        , B.BOARD_NO
        , M.MEMBER_NICK
        , S.HEAD_COUNT
        , B.MEMBER_ID
        , B.BOARD_TITLE
        , B.BOARD_CONTENT
        , B.CREATE_DT
        , B.MODIFY_DT
        , B.DELETED_FL
        , B.READ_COUNT
        , S.LOCATION
        , S.STUDY_NO
        , T.TAG_NM
        , TR.TAG_NO
        , B.MODIFY_DT
        , TO_CHAR(B.CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분"') AS CREATE_DT
        , (SELECT COUNT(*) FROM "LIKE" L WHERE L.BOARD_NO = S.BOARD_NO) LIKE_COUNT

        FROM BOARD B
        JOIN "MEMBER" M ON (B.MEMBER_ID = M.MEMBER_ID)
        JOIN BOARD_STUDY S ON (B.BOARD_NO = S.BOARD_NO)
        JOIN TAG_RELATION TR ON (B.BOARD_NO = TR.ITEM_NO)
        JOIN TAG T ON (TR.TAG_NO = T.TAG_NO)

        WHERE TR.ITEM_TYPE = 1
       <if test="location != null &amp;&amp; !location.equals('서울전체')">
            AND S.LOCATION LIKE '%${location}%'
        </if>
        <if test="tagNm != null">
            AND T.TAG_NM LIKE '%${tagNm}%'
        </if>
        <if test="headCount != null">
            AND S.HEAD_COUNT LIKE '%${headCount}%'
        </if>
        AND S.STUDY_STATUS = 'N'
        AND B.DELETED_FL = 'N'
        ORDER BY ROWNUM DESC
    </select>


    <!--팔로우 조회-->
    <select id="followCheck" resultType="_int">
        SELECT COUNT(*)
        FROM FOLLOW
        WHERE FOLLOW_FROM = #{memberId}
          AND FOLLOW_TO = #{userId}
    </select>

    <insert id="insertFollow">
        INSERT INTO FOLLOW
        VALUES (#{memberId}, #{userId})
    </insert>

    <delete id="deleteFollow">
        DELETE
        FROM FOLLOW
        WHERE FOLLOW_FROM = #{memberId}
          AND FOLLOW_TO = #{userId}
    </delete>

    <select id="selectTarget" resultMap="StudyResultMap">
        SELECT *
        FROM MEMBER
                 JOIN FOLLOW ON (MEMBER_ID = FOLLOW_FROM)
        WHERE FOLLOW_TO = #{memberId}
    </select>


    <!-- 채팅 상대 검색 -->
    <select id="selectTarget1" resultMap="StudyResultMap">
        SELECT MEMBER_ID, MEMBER_EMAIL, MEMBER_NICK, PROFILE_IMG  FROM "MEMBER"
        WHERE (MEMBER_EMAIL LIKE '%${query}%' OR MEMBER_NICK LIKE '%${query}%')
          AND DELETED_FL = 'N'
          AND MEMBER_ID != ${memberId}
    </select>

    <!-- 스터디 문의하기 -->
    <insert id="messageUpdate"  parameterType="Study">
        INSERT INTO "STUDY_MESSAGE" VALUES(#{boardNo},#{memberId})
    </insert>

    <select id="studyMessageSelect" resultType="_int">
        SELECT COUNT(*) FROM STUDY_MESSAGE WHERE BOARD_NO =#{boardNo} AND MEMBER_ID=#{memberId}
    </select>
</mapper>
